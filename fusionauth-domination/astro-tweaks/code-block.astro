---
// Enhanced Astro Code Block Component for FusionAuth Documentation
// Provides syntax highlighting, copy functionality, execution capabilities, and interactive features

export interface Props {
  code: string;
  language?: string;
  title?: string;
  filename?: string;
  showLineNumbers?: boolean;
  highlightLines?: number[];
  startLine?: number;
  maxHeight?: string;
  enableCopy?: boolean;
  enableExecution?: boolean;
  executionEnvironment?: 'browser' | 'node' | 'fusionauth-api';
  showExplanation?: boolean;
  explanation?: string;
  difficulty?: 'beginner' | 'intermediate' | 'advanced';
  estimatedTime?: string;
  prerequisites?: string[];
  relatedLinks?: Array<{ title: string; url: string; type: 'tutorial' | 'reference' | 'example' }>;
  hideUntilInteraction?: boolean;
  collapsible?: boolean;
  defaultCollapsed?: boolean;
  theme?: 'github-light' | 'github-dark' | 'monokai' | 'dracula' | 'fusionauth';
  interactive?: boolean;
  editable?: boolean;
  showDiff?: boolean;
  beforeCode?: string;
  afterCode?: string;
}

const {
  code,
  language = 'javascript',
  title,
  filename,
  showLineNumbers = true,
  highlightLines = [],
  startLine = 1,
  maxHeight = '500px',
  enableCopy = true,
  enableExecution = false,
  executionEnvironment = 'browser',
  showExplanation = false,
  explanation,
  difficulty,
  estimatedTime,
  prerequisites = [],
  relatedLinks = [],
  hideUntilInteraction = false,
  collapsible = false,
  defaultCollapsed = false,
  theme = 'fusionauth',
  interactive = false,
  editable = false,
  showDiff = false,
  beforeCode,
  afterCode
} = Astro.props;

// Generate unique ID for this code block
const codeBlockId = `code-block-${Math.random().toString(36).substr(2, 9)}`;

// Prepare code for syntax highlighting
const processedCode = code.trim();
const lineCount = processedCode.split('\n').length;

// Determine if this should be an interactive island
const shouldBeInteractive = enableExecution || interactive || editable;

// Language-specific configuration
const languageConfig = {
  javascript: { 
    icon: 'üü®', 
    displayName: 'JavaScript',
    executable: true,
    apiCompatible: true
  },
  typescript: { 
    icon: 'üî∑', 
    displayName: 'TypeScript',
    executable: true,
    apiCompatible: true
  },
  python: { 
    icon: 'üêç', 
    displayName: 'Python',
    executable: true,
    apiCompatible: true
  },
  java: { 
    icon: '‚òï', 
    displayName: 'Java',
    executable: false,
    apiCompatible: true
  },
  csharp: { 
    icon: 'üîπ', 
    displayName: 'C#',
    executable: false,
    apiCompatible: true
  },
  bash: { 
    icon: 'üñ•Ô∏è', 
    displayName: 'Bash',
    executable: false,
    apiCompatible: false
  },
  json: { 
    icon: 'üìã', 
    displayName: 'JSON',
    executable: false,
    apiCompatible: false
  },
  yaml: { 
    icon: 'üìÑ', 
    displayName: 'YAML',
    executable: false,
    apiCompatible: false
  }
};

const currentLangConfig = languageConfig[language] || { 
  icon: 'üìù', 
  displayName: language.toUpperCase(),
  executable: false,
  apiCompatible: false
};
---

<div 
  class={`enhanced-code-block ${theme} ${difficulty || ''} ${hideUntilInteraction ? 'hide-until-interaction' : ''}`}
  data-language={language}
  data-theme={theme}
  data-interactive={shouldBeInteractive}
  data-code-block-id={codeBlockId}
>
  <!-- Code Block Header -->
  <div class="code-block-header">
    <div class="code-block-info">
      <span class="language-indicator">
        <span class="language-icon" role="img" aria-label={currentLangConfig.displayName}>
          {currentLangConfig.icon}
        </span>
        <span class="language-name">{currentLangConfig.displayName}</span>
      </span>
      
      {title && (
        <h4 class="code-block-title">{title}</h4>
      )}
      
      {filename && (
        <div class="filename-indicator">
          <span class="filename-icon">üìÅ</span>
          <span class="filename">{filename}</span>
        </div>
      )}
      
      {difficulty && (
        <div class={`difficulty-badge ${difficulty}`}>
          <span class="difficulty-icon">
            {difficulty === 'beginner' && 'üü¢'}
            {difficulty === 'intermediate' && 'üü°'}
            {difficulty === 'advanced' && 'üî¥'}
          </span>
          <span class="difficulty-text">{difficulty}</span>
        </div>
      )}
      
      {estimatedTime && (
        <div class="time-estimate">
          <span class="time-icon">‚è±Ô∏è</span>
          <span class="time-text">{estimatedTime}</span>
        </div>
      )}
    </div>
    
    <div class="code-block-actions">
      {collapsible && (
        <button
          class="collapse-toggle"
          aria-expanded={!defaultCollapsed}
          aria-controls={`${codeBlockId}-content`}
          title="Toggle code visibility"
        >
          <span class="collapse-icon">
            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
              <path d="M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z"/>
            </svg>
          </span>
        </button>
      )}
      
      {enableCopy && (
        <button
          class="copy-button"
          data-code={processedCode}
          title="Copy code to clipboard"
          aria-label="Copy code to clipboard"
        >
          <span class="copy-icon-default">
            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
              <path d="M4 1.5H3a2 2 0 0 0-2 2V14a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V3.5a2 2 0 0 0-2-2h-1v1h1a1 1 0 0 1 1 1V14a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V3.5a1 1 0 0 1 1-1h1v-1z"/>
              <path d="M9.5 1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h3zm-3-1A1.5 1.5 0 0 0 5 1.5v1A1.5 1.5 0 0 0 6.5 4h3A1.5 1.5 0 0 0 11 2.5v-1A1.5 1.5 0 0 0 9.5 0h-3z"/>
            </svg>
          </span>
          <span class="copy-icon-success" style="display: none;">
            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
              <path d="M13.854 3.646a.5.5 0 0 1 0 .708l-7 7a.5.5 0 0 1-.708 0l-3.5-3.5a.5.5 0 1 1 .708-.708L6.5 10.293l6.646-6.647a.5.5 0 0 1 .708 0z"/>
            </svg>
          </span>
          <span class="copy-text">Copy</span>
        </button>
      )}
      
      {enableExecution && currentLangConfig.executable && (
        <button
          class="run-button"
          data-code={processedCode}
          data-language={language}
          data-environment={executionEnvironment}
          title="Run code example"
          aria-label="Execute code example"
        >
          <span class="run-icon">
            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
              <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z"/>
              <path d="M6.271 5.055a.5.5 0 0 1 .52.026L11 7.055a.5.5 0 0 1 0 .89L6.791 9.929a.5.5 0 0 1-.791-.39V5.604a.5.5 0 0 1 .271-.549z"/>
            </svg>
          </span>
          <span class="run-text">Run</span>
        </button>
      )}
      
      <div class="code-stats">
        <span class="line-count" title={`${lineCount} lines of code`}>
          {lineCount} lines
        </span>
      </div>
    </div>
  </div>

  <!-- Prerequisites (if any) -->
  {prerequisites.length > 0 && (
    <div class="code-prerequisites">
      <details class="prerequisites-details">
        <summary class="prerequisites-summary">
          <span class="prerequisites-icon">üìã</span>
          <span class="prerequisites-text">Prerequisites ({prerequisites.length})</span>
        </summary>
        <ul class="prerequisites-list">
          {prerequisites.map(prereq => (
            <li class="prerequisite-item">{prereq}</li>
          ))}
        </ul>
      </details>
    </div>
  )}

  <!-- Code Block Content -->
  <div 
    class={`code-block-content ${defaultCollapsed ? 'collapsed' : ''}`}
    id={`${codeBlockId}-content`}
    style={maxHeight ? `max-height: ${maxHeight}` : undefined}
  >
    {showDiff && beforeCode && afterCode ? (
      <!-- Diff View -->
      <div class="code-diff-container">
        <div class="diff-before">
          <div class="diff-label">Before</div>
          <pre class="diff-code before"><code class={`language-${language}`}>{beforeCode}</code></pre>
        </div>
        <div class="diff-after">
          <div class="diff-label">After</div>
          <pre class="diff-code after"><code class={`language-${language}`}>{afterCode}</code></pre>
        </div>
      </div>
    ) : (
      <!-- Standard Code View -->
      <pre 
        class={`code-pre ${showLineNumbers ? 'line-numbers' : ''}`}
        data-start={startLine}
        data-highlight={JSON.stringify(highlightLines)}
      ><code class={`language-${language}`} id={`${codeBlockId}-code`}>{processedCode}</code></pre>
    )}
    
    {editable && shouldBeInteractive && (
      <div class="editable-overlay" style="display: none;">
        <textarea 
          class="code-editor"
          spellcheck="false"
          autocomplete="off"
          autocorrect="off"
          autocapitalize="off"
        >{processedCode}</textarea>
      </div>
    )}
  </div>

  <!-- Execution Output (for interactive code blocks) -->
  {enableExecution && (
    <div class="execution-output" style="display: none;">
      <div class="output-header">
        <span class="output-label">Output</span>
        <button class="clear-output" title="Clear output">
          <svg width="14" height="14" viewBox="0 0 16 16" fill="currentColor">
            <path d="M2.146 2.854a.5.5 0 1 1 .708-.708L8 7.293l5.146-5.147a.5.5 0 0 1 .708.708L8.707 8l5.147 5.146a.5.5 0 0 1-.708.708L8 8.707l-5.146 5.147a.5.5 0 0 1-.708-.708L7.293 8 2.146 2.854Z"/>
          </svg>
        </button>
      </div>
      <div class="output-content">
        <div class="output-stdout"></div>
        <div class="output-stderr"></div>
        <div class="output-loading" style="display: none;">
          <div class="loading-spinner"></div>
          <span>Executing code...</span>
        </div>
      </div>
    </div>
  )}

  <!-- Code Explanation -->
  {showExplanation && explanation && (
    <div class="code-explanation">
      <details class="explanation-details">
        <summary class="explanation-summary">
          <span class="explanation-icon">üí°</span>
          <span class="explanation-text">Code Explanation</span>
        </summary>
        <div class="explanation-content" set:html={explanation} />
      </details>
    </div>
  )}

  <!-- Related Links -->
  {relatedLinks.length > 0 && (
    <div class="code-related-links">
      <details class="related-links-details">
        <summary class="related-links-summary">
          <span class="related-icon">üîó</span>
          <span class="related-text">Related Resources ({relatedLinks.length})</span>
        </summary>
        <ul class="related-links-list">
          {relatedLinks.map(link => (
            <li class="related-link-item">
              <a href={link.url} class={`related-link ${link.type}`} target="_blank" rel="noopener">
                <span class="link-type-icon">
                  {link.type === 'tutorial' && 'üìö'}
                  {link.type === 'reference' && 'üìñ'}
                  {link.type === 'example' && 'üíª'}
                </span>
                <span class="link-title">{link.title}</span>
                <span class="external-link-icon">
                  <svg width="12" height="12" viewBox="0 0 16 16" fill="currentColor">
                    <path d="M8.636 3.5a.5.5 0 0 0-.5-.5H1.5A1.5 1.5 0 0 0 0 4.5v10A1.5 1.5 0 0 0 1.5 16h10a1.5 1.5 0 0 0 1.5-1.5V7.864a.5.5 0 0 0-1 0V14.5a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h6.636a.5.5 0 0 0 .5-.5z"/>
                    <path d="M16 .5a.5.5 0 0 0-.5-.5h-5a.5.5 0 0 0 0 1h3.793L6.146 9.146a.5.5 0 1 0 .708.708L15 1.707V5.5a.5.5 0 0 0 1 0v-5z"/>
                  </svg>
                </span>
              </a>
            </li>
          ))}
        </ul>
      </details>
    </div>
  )}

  <!-- Accessibility Live Region for Screen Readers -->
  <div class="sr-only" aria-live="polite" aria-atomic="true" id={`${codeBlockId}-announcements`}></div>
</div>

{shouldBeInteractive && (
  <script>
    // Import the interactive code block functionality
    import('./enhanced-code-block.js').then(module => {
      const { EnhancedCodeBlock } = module;
      new EnhancedCodeBlock(document.querySelector(`[data-code-block-id="${codeBlockId}"]`));
    });
  </script>
)}

<style>
  .enhanced-code-block {
    --code-bg: hsl(220, 20%, 8%);
    --code-text: hsl(220, 20%, 85%);
    --code-border: hsl(220, 20%, 15%);
    --code-header-bg: hsl(220, 20%, 10%);
    --code-accent: hsl(210, 100%, 50%);
    --code-success: hsl(145, 85%, 47%);
    --code-warning: hsl(38, 92%, 50%);
    --code-error: hsl(0, 84%, 60%);
    --code-muted: hsl(220, 10%, 60%);
    
    background: var(--code-bg);
    border: 1px solid var(--code-border);
    border-radius: 12px;
    margin: 1.5rem 0;
    overflow: hidden;
    position: relative;
    font-family: 'Fira Code', 'SF Mono', 'Monaco', 'Cascadia Code', 'Roboto Mono', Consolas, monospace;
    font-size: 0.875rem;
    line-height: 1.5;
    
    /* Theme variations */
    &.github-light {
      --code-bg: hsl(0, 0%, 98%);
      --code-text: hsl(220, 20%, 15%);
      --code-border: hsl(210, 15%, 90%);
      --code-header-bg: hsl(210, 15%, 95%);
    }
    
    &.fusionauth {
      --code-accent: hsl(213, 94%, 51%);
      border: 1px solid hsla(213, 94%, 51%, 0.3);
    }
    
    /* Difficulty styling */
    &.beginner {
      --code-accent: hsl(145, 85%, 47%);
    }
    
    &.intermediate {
      --code-accent: hsl(38, 92%, 50%);
    }
    
    &.advanced {
      --code-accent: hsl(0, 84%, 60%);
    }
    
    /* Hide until interaction */
    &.hide-until-interaction {
      .code-block-content {
        filter: blur(4px);
        transition: filter 0.3s ease;
      }
      
      &:hover .code-block-content,
      &:focus-within .code-block-content {
        filter: blur(0);
      }
    }
  }

  .code-block-header {
    background: var(--code-header-bg);
    border-bottom: 1px solid var(--code-border);
    padding: 0.75rem 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    gap: 1rem;
    min-height: 3rem;
  }

  .code-block-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .language-indicator {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-weight: 600;
    color: var(--code-accent);
  }

  .language-icon {
    font-size: 1.1rem;
  }

  .code-block-title {
    margin: 0;
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--code-text);
  }

  .filename-indicator {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.8rem;
    color: var(--code-muted);
    background: rgba(255, 255, 255, 0.05);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
  }

  .difficulty-badge {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.75rem;
    font-weight: 600;
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    text-transform: uppercase;
    letter-spacing: 0.5px;
    
    &.beginner {
      background: hsla(145, 85%, 47%, 0.2);
      color: hsl(145, 85%, 47%);
    }
    
    &.intermediate {
      background: hsla(38, 92%, 50%, 0.2);
      color: hsl(38, 92%, 50%);
    }
    
    &.advanced {
      background: hsla(0, 84%, 60%, 0.2);
      color: hsl(0, 84%, 60%);
    }
  }

  .time-estimate {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.75rem;
    color: var(--code-muted);
    padding: 0.25rem 0.5rem;
    background: rgba(255, 255, 255, 0.05);
    border-radius: 4px;
  }

  .code-block-actions {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .collapse-toggle,
  .copy-button,
  .run-button {
    background: none;
    border: 1px solid var(--code-border);
    color: var(--code-muted);
    padding: 0.5rem;
    border-radius: 6px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.375rem;
    font-size: 0.75rem;
    transition: all 0.2s ease;
    
    &:hover {
      background: rgba(255, 255, 255, 0.1);
      border-color: var(--code-accent);
      color: var(--code-accent);
    }
    
    &:focus {
      outline: 2px solid var(--code-accent);
      outline-offset: 2px;
    }
    
    &:active {
      transform: translateY(1px);
    }
  }

  .copy-button {
    &.copied {
      color: var(--code-success);
      border-color: var(--code-success);
      
      .copy-icon-default {
        display: none;
      }
      
      .copy-icon-success {
        display: inline !important;
      }
      
      .copy-text::after {
        content: 'ied!';
      }
    }
  }

  .run-button {
    &.running {
      color: var(--code-warning);
      border-color: var(--code-warning);
      
      .run-icon {
        animation: spin 1s linear infinite;
      }
    }
    
    &.success {
      color: var(--code-success);
      border-color: var(--code-success);
    }
    
    &.error {
      color: var(--code-error);
      border-color: var(--code-error);
    }
  }

  .code-stats {
    font-size: 0.75rem;
    color: var(--code-muted);
  }

  .code-prerequisites,
  .code-explanation,
  .code-related-links {
    padding: 0.75rem 1rem;
    border-top: 1px solid var(--code-border);
    background: rgba(255, 255, 255, 0.02);
  }

  .prerequisites-details,
  .explanation-details,
  .related-links-details {
    margin: 0;
  }

  .prerequisites-summary,
  .explanation-summary,
  .related-links-summary {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    cursor: pointer;
    font-weight: 600;
    color: var(--code-text);
    font-size: 0.85rem;
    
    &:hover {
      color: var(--code-accent);
    }
  }

  .prerequisites-list,
  .related-links-list {
    margin: 0.75rem 0 0 0;
    padding: 0;
    list-style: none;
  }

  .prerequisite-item,
  .related-link-item {
    margin: 0.5rem 0;
    padding-left: 1.5rem;
    position: relative;
    font-size: 0.8rem;
    color: var(--code-muted);
    
    &::before {
      content: '‚Ä¢';
      position: absolute;
      left: 0.5rem;
      color: var(--code-accent);
    }
  }

  .related-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--code-accent);
    text-decoration: none;
    padding: 0.25rem 0;
    
    &:hover {
      text-decoration: underline;
    }
  }

  .code-block-content {
    position: relative;
    
    &.collapsed {
      max-height: 0 !important;
      overflow: hidden;
    }
  }

  .code-pre {
    margin: 0;
    padding: 1.25rem;
    overflow-x: auto;
    background: transparent;
    color: var(--code-text);
    white-space: pre;
    
    &.line-numbers {
      padding-left: 3.5rem;
      position: relative;
      
      &::before {
        content: '';
        position: absolute;
        left: 0;
        top: 0;
        bottom: 0;
        width: 3rem;
        background: rgba(255, 255, 255, 0.05);
        border-right: 1px solid var(--code-border);
      }
      
      /* Line numbers will be added via JavaScript */
    }
  }

  .code-diff-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1px;
    background: var(--code-border);
  }

  .diff-before,
  .diff-after {
    background: var(--code-bg);
  }

  .diff-label {
    padding: 0.5rem 1rem;
    font-size: 0.75rem;
    font-weight: 600;
    background: rgba(255, 255, 255, 0.05);
    border-bottom: 1px solid var(--code-border);
  }

  .diff-before .diff-label {
    color: var(--code-error);
  }

  .diff-after .diff-label {
    color: var(--code-success);
  }

  .diff-code {
    margin: 0;
    padding: 1rem;
    overflow-x: auto;
  }

  .editable-overlay {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: var(--code-bg);
  }

  .code-editor {
    width: 100%;
    height: 100%;
    background: transparent;
    border: none;
    color: var(--code-text);
    font-family: inherit;
    font-size: inherit;
    line-height: inherit;
    padding: 1.25rem;
    resize: none;
    outline: none;
    white-space: pre;
    overflow: auto;
    
    &:focus {
      background: rgba(255, 255, 255, 0.02);
    }
  }

  .execution-output {
    border-top: 1px solid var(--code-border);
    background: rgba(0, 0, 0, 0.2);
  }

  .output-header {
    padding: 0.5rem 1rem;
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: rgba(255, 255, 255, 0.05);
    border-bottom: 1px solid var(--code-border);
  }

  .output-label {
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--code-text);
  }

  .clear-output {
    background: none;
    border: none;
    color: var(--code-muted);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    
    &:hover {
      background: rgba(255, 255, 255, 0.1);
      color: var(--code-text);
    }
  }

  .output-content {
    padding: 1rem;
    max-height: 200px;
    overflow-y: auto;
  }

  .output-stdout,
  .output-stderr {
    font-family: inherit;
    font-size: 0.8rem;
    line-height: 1.4;
    white-space: pre-wrap;
    margin: 0;
  }

  .output-stdout {
    color: var(--code-text);
  }

  .output-stderr {
    color: var(--code-error);
  }

  .output-loading {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: var(--code-muted);
    font-size: 0.8rem;
  }

  .loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid var(--code-border);
    border-top: 2px solid var(--code-accent);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .explanation-content {
    margin-top: 0.75rem;
    font-size: 0.85rem;
    line-height: 1.6;
    color: var(--code-text);
    
    p {
      margin: 0.5rem 0;
    }
    
    code {
      background: rgba(255, 255, 255, 0.1);
      padding: 0.125rem 0.375rem;
      border-radius: 4px;
      font-size: 0.8rem;
    }
  }

  /* Accessibility */
  .sr-only {
    position: absolute;
    width: 1px;
    height: 1px;
    padding: 0;
    margin: -1px;
    overflow: hidden;
    clip: rect(0, 0, 0, 0);
    white-space: nowrap;
    border: 0;
  }

  /* Responsive design */
  @media (max-width: 768px) {
    .enhanced-code-block {
      margin: 1rem -1rem;
      border-radius: 0;
      border-left: none;
      border-right: none;
    }
    
    .code-block-header {
      flex-direction: column;
      align-items: stretch;
      gap: 0.75rem;
    }
    
    .code-block-info {
      justify-content: space-between;
    }
    
    .code-block-actions {
      justify-content: center;
    }
    
    .code-pre {
      padding: 1rem;
      
      &.line-numbers {
        padding-left: 3rem;
      }
    }
    
    .code-diff-container {
      grid-template-columns: 1fr;
    }
  }

  /* High contrast mode support */
  @media (prefers-contrast: high) {
    .enhanced-code-block {
      border-width: 2px;
    }
    
    .copy-button,
    .run-button,
    .collapse-toggle {
      border-width: 2px;
    }
  }

  /* Reduced motion support */
  @media (prefers-reduced-motion: reduce) {
    .copy-button,
    .run-button,
    .collapse-toggle {
      transition: none;
    }
    
    .loading-spinner {
      animation: none;
      border-top-color: var(--code-accent);
    }
  }

  /* Dark mode adjustments */
  @media (prefers-color-scheme: dark) {
    .enhanced-code-block.github-light {
      --code-bg: hsl(220, 20%, 8%);
      --code-text: hsl(220, 20%, 85%);
      --code-border: hsl(220, 20%, 15%);
      --code-header-bg: hsl(220, 20%, 10%);
    }
  }

  /* Animations */
  @keyframes spin {
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(0.5rem);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .enhanced-code-block {
    animation: fadeIn 0.3s ease-out;
  }

  /* Print styles */
  @media print {
    .enhanced-code-block {
      break-inside: avoid;
      background: white !important;
      color: black !important;
      border: 1px solid black !important;
    }
    
    .code-block-actions {
      display: none;
    }
    
    .execution-output,
    .code-explanation {
      display: none;
    }
  }
</style>